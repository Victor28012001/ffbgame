/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import React, { useRef } from "react";
import { fadeOnBeforeCompile } from "../utils/fadeMaterial";
import { Mesh, MeshStandardMaterial } from "three";

interface CloudProps extends React.HTMLProps<SVGElement> {
  sceneOpacity: React.RefObject<number>;
}

// Define the structure of your GLTF model's nodes
interface GLTFNode {
  Mball001: Mesh; // Adjust the type if Mball001 has specific properties
}

export function Cloud({ sceneOpacity, ...props }: CloudProps) {
  const { nodes } = useGLTF("./models/cloud/model.gltf") as unknown as { nodes: GLTFNode };

  const materialRef = useRef<MeshStandardMaterial | null>(null);

  useFrame(() => {
    if (materialRef.current) {
      materialRef.current.opacity = sceneOpacity.current ?? 1; // Default to 1 if undefined
    }
  });

  return (
    <group {...(props as any)} dispose={null}>
      <mesh geometry={nodes.Mball001.geometry}>
        <meshStandardMaterial
          ref={materialRef}
          onBeforeCompile={fadeOnBeforeCompile}
          envMapIntensity={2}
          transparent
          opacity={0}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("./models/cloud/model.gltf");
